import 'dart:io';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:google_sign_in/google_sign_in.dart';import 'package:shaded_app_freelancer/auth/auth_controller/auth_controller.dart';import 'package:shaded_app_freelancer/auth/user_signUp_screen.dart';import 'package:shaded_app_freelancer/core/shared_preferances/shared_preferances.dart';import 'package:shaded_app_freelancer/models/captain_model.dart';import 'package:shaded_app_freelancer/models/login_model.dart';import 'package:shaded_app_freelancer/widget/public_widgets.dart';import '../models/app_color.dart';import 'otp/otp_screen.dart';class LoginController extends GetxController {  TextEditingController gender = TextEditingController();  final formLoginKey = GlobalKey<FormState>();  bool isLoading = false;  ///======================================== > Otp TextEditingController  TextEditingController OtpController = TextEditingController();  final formKey = GlobalKey<FormState>();  ///======================================== > End Otp TextEditingController  TextEditingController phoneLoginController = TextEditingController();  Future<void> login({required BuildContext context}) async {    print('init myMethod');    String phone = '+966${phoneLoginController.text}';    // String? fcmToken = await FirebaseMessaging.instance.getToken().then((value) => value);    String fcmToken = '';    String deviceType = Platform.isAndroid ? 'android' : 'ios';    update();    isLoading = true;    update();    try {      await AuthController.login(        phoneNumber: phone,        fcmToken: fcmToken ?? "Ana token hhh XD",        deviceType: deviceType,        userType: gender.text == 'مستخدم' ? '1' : '2',      ).then((value) {        print(value.fold(          (l) => print(l),          (r) => print(r),        ));        value.fold(          (CaptainModel captainModel) {            print(captainModel.status);            if (captainModel.status && captainModel.data != null) {              final model = captainModel.data!;              SharedPrefController()                  .saveDriver(user: captainModel.data!)                  .then((_) {                if (model.status.name == 'active') {                  Get.to(                    Container(),                  );                } else {                  Get.to(                    OtpPage(                      phoneNumber: phone,                      otpCode: model.code,                      userType: '2',                    ),                  );                }              });            } else {              ScaffoldMessenger.of(context).showSnackBar(                SnackBar(                  duration: Duration(seconds: 2),                  content: CustomText('لم يتم تسجيل الدخول', 15, Colors.white),                ),              );              Future.delayed(Duration(milliseconds: 2000)).then((value) {                Get.to(                  UserSignupPage(),                );              });              // CaptainSignupPage( //               phoneNumber: '$phone', //             ),            }          },          (LoginUserModel LoginUserModel) {            if (LoginUserModel.status && LoginUserModel.data != null) {              SharedPrefController()                  .saveUser(user: LoginUserModel.data!)                  .then((value) {                final model = LoginUserModel.data!;                Get.to(                  OtpPage(                    phoneNumber: "$phone",                    otpCode: model.code,                    userType: '1',                  ),                );              });            } else {              Get.to(UserSignupPage());            }          },        );        update();      }).catchError((e, stackTrace) {        print('Error occurred: $e\n$stackTrace');      });    } catch (e) {      print("MyError  :   " + e.toString());    }    isLoading = false;    update(); // result.fold( //   (captain) { //     SharedPrefController().saveDriver(user: captain.data!); //     emit(CaptainLoginSuccess(fcmToken!, deviceType, "كابتن", captain)); //   }, //   (user) { //     SharedPrefController().saveUser(user: user.data!).then((_) { //       emit(UserLoginSuccess(fcmToken!, deviceType, "مستخدم", user)); //     }); //   }, // );  }  signInWithGoogle() async {    try {      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();      final GoogleSignInAuthentication? googleAuth =          await googleUser?.authentication; // Create a new credential      final credential = GoogleAuthProvider.credential(        accessToken: googleAuth?.accessToken,        idToken: googleAuth?.idToken,      );      await FirebaseAuth.instance.signInWithCredential(credential);    } catch (errorCode) {      print('##### ${errorCode} #####');    }  }}